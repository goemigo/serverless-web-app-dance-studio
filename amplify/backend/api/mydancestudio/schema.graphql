type Class
  @model(subscriptions: null)
  @auth(
    rules: [
      # allow admins to create, update and delete classes
      { allow: groups, groups: ["Admin"] }
      # allow all authenticated users to view classes
      { allow: private, operations: [read] }
      # allow all guest users (not authenticated) to view classes
      { allow: public, operations: [read] }
    ]
  ) {
  id: ID!
  title: String!
  location: String!
  time: AWSDateTime!
  image: String
  instructor: String
  price: Float!
  orders: [ClassOrder] @hasMany
}

type ClassOrder
  @model(queries: null, subscriptions: null)
  @auth(
    rules: [
      # allow admins to create orders for customers by using customer email in lambda
      { allow: owner, identityClaim: "email", ownerField: "customer" }
      { allow: groups, groups: ["Admin"] }
    ]
  ) {
  id: ID!
  @index(name: "byClassOrder", sortKeyFields:  ["class_id", "order_id"], queryField: "classOrderByClassOrder") 
  @index(name: "byOrder", sortKeyFields:   ["order_id", "class_id"], queryField: "classOrderByOrder") 
  class_id: ID!
  order_id: ID!
  class: Class @belongsTo
  order: Order @belongsTo
}

type Order
  @model(subscriptions: null)
  @auth(
    rules: [
      # only owner can see his orders
      { allow: owner, identityClaim: "email", ownerField: "customer" }
      # allow admins to view orders
      { allow: groups, groups: ["Admin"] }
    ]
  ){
  id: ID!
  user: String!
  # @index(name: "byUser", sortKeyFields: ["user"], queryField: "orderByUser") 
  date: String
  total: Float
  classes: [ClassOrder] @hasMany
}

enum OrderStatus {
  SUCCESS
  FAILED
}

input CartItem {
  id: ID!
  title: String
  image: String
  price: Float
  amount: Int
}

input ProcessOrderInput {
  id: ID!
  cart: [CartItem]
  total: Float!
  token: String!
}

type Mutation {
  processOrder(input: ProcessOrderInput!): OrderStatus
    @function(name: "processPayment-${env}")
    @function(name: "createOrder-${env}")
}
